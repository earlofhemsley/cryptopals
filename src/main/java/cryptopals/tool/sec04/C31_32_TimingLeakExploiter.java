package cryptopals.tool.sec04;

import cryptopals.exceptions.CryptopalsException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.bouncycastle.util.encoders.Hex;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.net.URI;

/**
 * a class dedicated to exploiting timing leaks in order to complete
 * challenges 31 and 32
 */
@Slf4j
@RequiredArgsConstructor
public class C31_32_TimingLeakExploiter {

    private final String file;
    private final int port;
    private final RestTemplate restTemplate;

    public void exploitLeak(final byte[] forgedHash, final long startingThreshold, final long thresholdIncrement) {
        //define a threshold. if a request takes longer than this, count it as valid
        long threshold = startingThreshold;
        long responseTime;
        boolean found;

        for (int i = 0; i < forgedHash.length; i++) {
            int j = Byte.MIN_VALUE;
            do {
                forgedHash[i] = (byte) j;
                final long startTime = System.currentTimeMillis();
                makeRequest(forgedHash);
                responseTime = System.currentTimeMillis() - startTime;
                j++;
                found = responseTime > threshold;
            } while (!found && j <= Byte.MAX_VALUE);

            if (!found) {
                throw new CryptopalsException(String.format("failed to detect the byte using timing leak. result before failure: %s",
                        Hex.toHexString(forgedHash)));
            }

            log.info("found a byte. now the hash is {}", Hex.toHexString(forgedHash));

            if (HttpStatus.OK == makeRequest(forgedHash)) {
                log.info("the hash was {}", Hex.toHexString(forgedHash));
                break;
            } else {
                //add fifty to the threshold
                threshold += thresholdIncrement;
            }
        }
    }

    public HttpStatus makeRequest(final byte[] forgedHash) {
        final String signature = Hex.toHexString(forgedHash);
        final URI uri = URI.create(String.format("http://localhost:%s/leak/test/%s?signature=%s",
                port,
                file,
                signature
        ));
        final ResponseEntity<String> response = restTemplate.getForEntity(uri, String.class);
        if (response.getStatusCode() == HttpStatus.BAD_REQUEST) {
            throw new AssertionError("Got a bad request response");
        }
        return response.getStatusCode();
    }
}
